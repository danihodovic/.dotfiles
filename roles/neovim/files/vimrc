"-----------------------------------------
" Vim Plug
"-----------------------------------------
" Only load plugins if we have vim-plug installed
let s:has_plug = 0
try
  call plug#begin('$HOME/.config/nvim/plugged')
  let s:has_plug = 1
catch /Unknown function/
endtry

if s:has_plug == 1
  "-----------------------------------------
  " General plugins
  "-----------------------------------------
  set rtp+=~/.fzf
  Plug 'airblade/vim-gitgutter'                 " Show changed git lines
  Plug 'airblade/vim-rooter'                    " Sets root directory to project (git) directory by default
  Plug 'neomake/neomake'
  Plug 'danihodovic/vim-snippets'               " My own snippets
  Plug 'equalsraf/neovim-gui-shim'              " Shim for nvim-qt that adds commands such as Guifont
  Plug 'flazz/vim-colorschemes'
  Plug 'FooSoft/vim-argwrap'                    " Collapse or expand arguments for a function
  Plug 'junegunn/fzf.vim'
  Plug 'junegunn/vim-easy-align'                " Align code around arbitrary characters =,:
  Plug 'junegunn/vim-oblique'                   " Colors search result and sets nohlsearch on cursor move
  Plug 'junegunn/vim-pseudocl'                  " Required by vim-oblique
  Plug 'kana/vim-textobj-function'              " Add function based text objects
  Plug 'kana/vim-textobj-user'                  " Add additional text objects
  Plug 'gcmt/wildfire.vim'
  Plug 'kopischke/vim-fetch'                    " Open files at file:line:column
  Plug 'easymotion/vim-easymotion'              " Better movement with f/t
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'luochen1990/rainbow'                    " Show diff level of parentheses in diff colors
  Plug 'lukas-reineke/indent-blankline.nvim'
  Plug 'reedes/vim-wordy'                       " Linting for prose
  Plug 'tomtom/tcomment_vim'
  Plug 'SirVer/ultisnips'
  Plug 'sunaku/vim-hicterm'                     " Displays cterm colors
  Plug 'tmhedberg/matchit'                      " Extended % matching for various languages
  Plug 'reconquest/vim-pythonx'                 " Allows for snippet aliasing
  Plug 'AndrewRadev/tagalong.vim'               " Dynamically changes html tags
  Plug 'AndrewRadev/linediff.vim'
  Plug 'tpope/vim-abolish'                      " Change snake case to camelcase and vice versa
  Plug 'tpope/vim-fugitive'                     " Various git commands inside vim
  Plug 'tpope/vim-rhubarb'                      " Github commands for Fugitive
  Plug 'tpope/vim-surround'                     " Surround text with (){}<>
  Plug 'tpope/vim-eunuch'                       " Unix helpers for vim
  Plug 'kamykn/spelunker.vim'
  Plug 'wakatime/vim-wakatime'
  Plug 'vitalk/vim-shebang'
  Plug 'rhysd/git-messenger.vim'
  Plug 'mzlogin/vim-markdown-toc'
  Plug 'junegunn/goyo.vim'
  Plug 'brooth/far.vim'
  Plug 'glacambre/firenvim'
  Plug 'vim-test/vim-test'
  Plug 'camspiers/lens.vim'
  Plug 'sheerun/vim-polyglot'
  Plug 'ActivityWatch/aw-watcher-vim'
  Plug 'takac/vim-hardtime'
  Plug 'andymass/vim-matchup'
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
  Plug 'vim-airline/vim-airline'
  Plug 'github/copilot.vim'
  " -----------------------------------------
  " Lang specific
  " -----------------------------------------
  Plug 'ledger/vim-ledger'
  Plug 'rhysd/committia.vim'
  Plug 'tweekmonster/django-plus.vim'
  Plug 'thinca/vim-textobj-function-javascript' " Add JS function object
  Plug 'bps/vim-textobj-python'
  Plug 'danihodovic/vim-ansible-vault'
  Plug 'b4b4r07/vim-hcl'
  Plug 'numirias/semshi', {'do': ':UpdateRemotePlugins'}
  Plug 'ap/vim-css-color'
  Plug 'rhysd/vim-github-actions'
  Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
  Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
  Plug 'direnv/direnv.vim'
  Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
  Plug 'google/vim-jsonnet'
  call plug#end()
end

" lua require'colorizer'.setup()
"-----------------------------------------
" General settings
set fillchars=stl:─,stlnc:─,vert:│,fold:─,diff:─
set gdefault
set nomodeline
"-----------------------------------------
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
" Silences C-Q, C-S and allows vim to catch them
silent !stty -ixon > /dev/null 2>/dev/null
" All y/p operations use clipboard by default
set clipboard=unnamedplus
set nobackup
set nowritebackup
set noswapfile
" Disable spelling to use spelunker
set nospell
set title
set number
" Dont auto resize windows (good for i3)
set winfixwidth
set norelativenumber
" Don't display the mode in insert mode at the bottom
set noshowmode
" Set pwd to current file
set autochdir
" Can switch buffers without saving
set hidden
" Seems like backspace doesn't work for nvim and source compiled new vim versions
set backspace=indent,eol,start
" Dont treat _ like a keyword so_that_this_is_six_words
set iskeyword-=_
" Paste mode to paste properly. Is this required?
set pastetoggle=<F9>
" timeout in ms for key mappings interval
set timeoutlen=500
" Check for file changes every time CursorHold is triggered.
" Executing this in a command line window causes an error
au CursorHold * if expand("%") != "[Command Line]" | checktime
" If files have not been changed when :checktime is ran, reload the files automatically without
" asking for permission
set autoread
" Specify location of tags file
" 'The last semicolon is the key here. When Vim tries to locate the 'tags' file, it first looks at the current
" directory, then the parent directory, then the parent of the parent, and so on'
set tags=./tags;
set diffopt=filler,vertical
set scrolloff=10
set nofoldenable
let g:go_fmt_experimental = 1
let g:markdown_composer_autostart = 0
"-----------------------------------------
" User defined commands
"-----------------------------------------
" Resize vertically easier. `res` is built in, `vr` is not
command! -nargs=? Vr vertical resize <args>
command! -nargs=? Hr resize <args>
command! Fp echo expand('%:p')
"-----------------------------------------
" General remappings
"-----------------------------------------
"TODO: Add remappings for vim command mode and insert mode for moving around and
"deleting previous/next.
let mapleader = ","
noremap <leader>q q
" Execute macro over a visual selection
xnoremap <leader>q :'<,'>:normal @q<CR>
" Copy til end of line (default is entire line - use `Y` for entire line instead)
nnoremap Y yg_
" Movement
noremap q b
" Movement begin/end of line
noremap Q ^
noremap W g_
noremap $ <nop>
noremap ^ <nop>
" Move to next screen (vim) line instead of file line. Useful for long lines that span over two vim lines
noremap j gj
noremap k gk
nnoremap : <nop>
execute "nnoremap <space> :" . &cedit . "a"
execute "xnoremap <space> :" . &cedit . "a"
execute "nnoremap / /" . &cedit . "a"
execute "xnoremap / /" . &cedit . "a"
execute "nnoremap ? ?" . &cedit . "a"
execute "xnoremap ? ?" . &cedit . "a"
" Exit cmdwindow on esc
nnoremap <C-w> :q<cr>
autocmd CmdwinEnter * nnoremap <buffer> <C-w> :q<cr>
set cmdwinheight=1
" Easier semicolon insertion
autocmd FileType javascript,typescript,css,perl,nginx noremap ;; :call InsertSemicolons()<CR>
nnoremap m %
vnoremap m %
nnoremap ; m
" Stay in visual mode when indenting
vnoremap <C-<> <gv
vnoremap <C->> >gv
nnoremap <C-<> <<
nnoremap <C->> >>
nnoremap { [{
nnoremap } ]}
nnoremap ( [(
nnoremap ) ])

"Window movement
inoremap <silent> <C-h> <esc>:wincmd h<cr>
inoremap <silent> <C-l> <esc>:wincmd l<cr>
inoremap <silent> <C-j> <esc>:wincmd j<cr>
inoremap <silent> <C-k> <esc>:wincmd k<cr>

nnoremap <silent> <C-h> :wincmd h<cr>
nnoremap <silent> <C-l> :wincmd l<cr>
nnoremap <silent> <C-j> :wincmd j<cr>
nnoremap <silent> <C-k> :wincmd k<cr>

nnoremap <leader>w :write<cr>

nnoremap + :vertical resize +10<cr>
nnoremap _ :vertical resize -10<cr>
" Buffer operations similar to browsers
nnoremap <C-q> :call MimicBrowserClose()<CR>
" Text width formatting for small blocks
nnoremap <leader>fo :call ReformatTextWidth()<cr>
vnoremap <leader>fo :call ReformatTextWidth()<cr>
" Blink the current word when switching search words
nnoremap <silent> n   n:call HLNext(0.1)<cr>
nnoremap <silent> N   N:call HLNext(0.1)<cr>
" Map S to ys for vim-surround
map S ys
nnoremap <leader>aw :ArgWrap<cr>
nnoremap <leader>en :lnext<cr>
nnoremap <leader>ep :lprevious<cr>

nnoremap <leader>n :lbelow<cr>
nnoremap <leader>m :labove<cr>
" augroup SyntaxSettings
    " autocmd!
    " autocmd BufNewFile,BufRead *.tsx set filetype=typescriptreact
" augroup END
"-----------------------------------------
" Color scheme settings
"-----------------------------------------
"Make sure to place color schemes after the vundle runtime has been declared
syntax enable
set background=dark
" Set the colorscheme using silent so that we don't fail on servers without plugins
silent! colorscheme badwolf
hi clear SpellBad
hi SpellBad ctermfg=DarkRed term=undercurl
filetype plugin indent on
"-----------------------------------------
" Search
"-----------------------------------------
" Highlight search
set hlsearch
" Show search while typing
set incsearch
" Ignore case
set wildignorecase
" Smart search. If uppercase chars search case sensitive.
set ignorecase smartcase
" Highlight the current line under the cursor
set cursorline
hi CursorLine ctermbg=236 guibg=#242321
" Resets search
autocmd InsertEnter * set cursorline
" Color of search highlight
" Note, this has to go AFTER the skin settings
highlight Search ctermfg=45 ctermbg=black
highlight Search guifg=red guibg=black
highlight SearchFlash guibg=red ctermfg=132 ctermbg=16
"-----------------------------------------
" Text width settings
"-----------------------------------------
set textwidth=79
autocmd FileType html,htmldjango setlocal textwidth=0
set colorcolumn=79
autocmd FileType gitcommit setlocal textwidth=72
autocmd FileType gitcommit setlocal colorcolumn=72
" Sets the colorcolumn only in active windows
augroup BgHighlight
    autocmd!
    autocmd WinEnter * set cursorline
    autocmd WinLeave * set nocursorline
augroup END
" Wrapping can start 5 chars from right margin
set wrapmargin=5
autocmd BufNewFile,BufRead nginx.*.j2 set ft=nginx
"-----------------------------------------
" Indentation settings
" See http://tedlogan.com/techblog3.html
" softtabstop - number of spaces in tab character
" tabstop - number of visual spaces in a tab
" expandtab - tabs become spaces
"-----------------------------------------
" `nocindent smartindent` will allow us to omit semicolons and jump to the next line without auto indentation
" for Javascript/Typescript
autocmd FileType typescript,javascript,javascriptreact,typescriptreact,terraform,jinja2  setlocal  shiftwidth=2 tabstop=2 expandtab nocindent smartindent
autocmd FileType coffee                 setlocal  shiftwidth=2 tabstop=2 expandtab
autocmd FileType css,scss,stylus        setlocal  shiftwidth=2 tabstop=2 expandtab
autocmd FileType vim                    setlocal  shiftwidth=2 tabstop=2 expandtab
autocmd FileType tex                    setlocal  shiftwidth=2 tabstop=2 expandtab
autocmd FileType yaml,docker-compose    setlocal  shiftwidth=2 tabstop=2 expandtab
autocmd FileType json                   setlocal  shiftwidth=2 tabstop=2 expandtab
autocmd FileType snippets               setlocal  shiftwidth=2 tabstop=2 expandtab
autocmd FileType jade                   setlocal  shiftwidth=2 tabstop=2 expandtab
autocmd FileType html,htmldjango        setlocal  shiftwidth=2 tabstop=2 expandtab
autocmd FileType python                 setlocal  shiftwidth=4 tabstop=4 expandtab
autocmd FileType go                     setlocal  shiftwidth=4 tabstop=4 noexpandtab
autocmd FileType erlang                 setlocal  shiftwidth=4 tabstop=4 noexpandtab
autocmd FileType make                   setlocal  shiftwidth=4 tabstop=4 noexpandtab
autocmd FileType sh,bash,zsh,readline,nginx,conf setlocal  shiftwidth=2 tabstop=2 expandtab nocindent smartindent
autocmd FileType php                    setlocal  shiftwidth=4 tabstop=4 expandtab
autocmd FileType markdown               setlocal  shiftwidth=4 tabstop=4 expandtab
autocmd FileType ruby                   setlocal  shiftwidth=2 tabstop=2 expandtab
autocmd FileType lua                    setlocal  shiftwidth=2 tabstop=2 expandtab
autocmd FileType sshconfig              setlocal  shiftwidth=4 tabstop=4 expandtab
"-----------------------------------------
" Plugin specific settings
"-----------------------------------------
" fzf.vim
"-----------------------------------------
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'vsplit',
  \ 'ctrl-z': 'split' }
let g:fzf_layout = { 'window': 'call FloatingFZF()' }
let g:fzf_files_options = '--ansi --preview "bat --style=plain {}" --preview-window right:100'
nnoremap b :e #<cr>
nnoremap - :Buffers<cr>
nnoremap = :call FzfGitChangedFilesFromMaster()<cr>
nnoremap <M-=> :Files<cr>
nnoremap <M--> :GitFiles<cr>

function! FloatingFZF()
  let buf = nvim_create_buf(v:false, v:true)
  call setbufvar(buf, '&signcolumn', 'no')

  let height = &lines - 10
  let width = float2nr(&columns - (&columns * 2 / 30))
  let col = float2nr((&columns - width) / 2)

  let opts = {
        \ 'relative': 'editor',
        \ 'row': 3,
        \ 'col': col,
        \ 'width': width,
        \ 'height': height
        \ }

  call nvim_open_win(buf, v:true, opts)
endfunction

function! FzfGitChangedFilesFromMaster()
  let root = split(system('git rev-parse --show-toplevel'), '\n')[0]
  if v:shell_error
    echom 'Not in git repo'
    return
  endif

  let default_remote_branch = split(system("git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'"), '\n')[0]
  let cmd_diff_files = printf('git diff origin/%s --name-only', default_remote_branch)
  let diff_files = split(system(cmd_diff_files), '\n')

  let untracked_files = split(system('git ls-files --others --exclude-standard'), '\n')
  let files = diff_files + untracked_files

  let wrapped = fzf#wrap({
  \ 'source':  files,
  \ 'dir':     root,
  \ 'options': '--ansi --multi --bind=alt-a:select-all --nth 2..,.. --tiebreak=index --prompt "GitFiles?> " --preview ''sh -c "(git diff origin/master --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500"''',
  \ 'up':      '50%',
  \})
  call fzf#run(wrapped)
endfunction

command! -nargs=* Calls :call FindFunctionCalls(<q-args>)
fu! FindFunctionCalls(query)
  let fn_name = ''
  if len(a:query) == ''
    let fn_name = expand('<cword>')
  else
    let fn_name = a:query
  endif

  let str = printf('%s\s*\(.*', fn_name)
  call fzf#vim#ag(str)
endfu

command! -nargs=* LogStatement :call LogStatementFind(<q-args>)
fu! LogStatementFind(query)
  let query = a:query
  if len(query) == ''
    let query = expand('<cword>')
  end

  let regex = printf('console.log\(''%s', query)
  call fzf#vim#ag(regex)
endfu

command! FocusTest :call FocusTest()
fu! FocusTest()
  let regex = '(it\.only)|(describe\.only)|(it\(''=>)|(describe\(''=>)'
  call fzf#vim#ag(regex)
endfu


function! RipgrepFzf(query, fullscreen, search_hidden)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case '
  if a:search_hidden
    let command_fmt = command_fmt . '-uu '
  end
  let command_fmt = command_fmt . '-- %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command, '--bind', 'ctrl-a:select-all', '--multi']}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction
command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0, 0)
nnoremap \ :RG<cr>

command! -nargs=* -bang RGDeps call RipgrepFzf(<q-args>, <bang>0, 1)
nnoremap <M-\> :RGDeps<cr>


command! -nargs=1 -complete=file -range RgDeps call RgDeps(<q-args>)
function! RgDeps(args)
  let query = a:args
  if query == ''
    let query = Get_visual_selection()
  endif

py3 <<EOF
import vim
import subprocess
from subprocess import PIPE
from pathlib import Path
import os

def output(cmd):
  return subprocess.run(cmd, shell=True, stdout=PIPE, stderr=PIPE).stdout.decode('utf8').strip()

def get_deps_dir():
  ft = vim.eval("&ft")

  if ft == "python":
    if ".venv" in os.listdir():
      return Path(os.getcwd()) / ".venv" / "lib"

    pip_path = output("which pip")
    return Path(pip_path).parent.parent / 'lib'

  elif ft in ['javascript', 'typescript', 'typescript.tsx', 'scss', 'css']:
    root_dir = output("git rev-parse --show-toplevel")
    return Path(root_dir) / 'node_modules'

  vim.command('echo "Cant autodetect dependecies dir for current ft"')
  return ''

deps_dir = get_deps_dir()
vim.command(f"let deps_dir = '{deps_dir}'")
EOF

  echo deps_dir
  if len(deps_dir) > 0
    call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case " . query . " " . deps_dir, 1)
  endif
endfunction
"-----------------------------------------
" coc.nvim (https://github.com/neoclide/coc.nvim)
"-----------------------------------------
" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr><cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gt <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <leader>re <Plug>(coc-rename)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>
let g:coc_global_extensions = [
      \ 'coc-json',
      \ 'coc-yaml',
      \ 'coc-vimlsp',
      \ 'coc-highlight',
      \ 'coc-html',
      \ 'coc-css',
      \ 'coc-github',
      \ 'coc-ultisnips',
      \ 'coc-jedi',
      \ 'coc-pyright',
      \ 'coc-tsserver',
      \ 'coc-word',
      \ 'coc-emoji',
      \ 'coc-pairs',
      \]
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

inoremap <silent><expr> <c-space> coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

set updatetime=300
set shortmess+=c

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

function! Format()
py3 <<EOF
import vim
import subprocess
import os

def run():
  rc = subprocess.run("git rev-parse --is-inside-work-tree", shell=True).returncode
  if rc != 0:
    return

  fname = vim.current.buffer.name
  if "venv/src" in fname:
    return

  rc = subprocess.run(f"git ls-files --error-unmatch {fname}", shell=True).returncode
  if rc != 0:
    return

  if os.getenv("VIM_DISABLE_AUTOFORMAT") == "true":
    return

  # vim.command("call CocAction('format')")
  # vim.command("OR")
run()

EOF
endfun

augroup FormatFiles
    autocmd FileType python,json
        \ autocmd! FormatFiles BufWritePost <buffer> call Format()
augroup END

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)

" nnoremap <leader>or :call     CocAction('runCommand', 'editor.action.organizeImport')
" command! -nargs=? Fold :call     CocAction('fold', <f-args>)
" command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
"-----------------------------------------
" FooSoft/vim-argwrap
"-----------------------------------------
autocmd filetype go let b:argwrap_tail_comma = 1
"-----------------------------------------
" vim-oblique
"-----------------------------------------
let g:oblique#incsearch_highlight_all=1
"-----------------------------------------
" vim-indent-guides
"-----------------------------------------
" define our own colors instead of the plugin defining it for us
let g:indent_guides_auto_colors = 0
"ctermbg 234 = darkgrey, ctermbg 235 = lightgrey
autocmd VimEnter * if exists(":NERDTree") | IndentGuidesEnable
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=234
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=235
"-----------------------------------------
" EasyMotion
"-----------------------------------------
let g:EasyMotion_grouping = 1
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1
let g:EasyMotion_do_shade = 1
let g:EasyMotion_use_upper = 1
map f <Plug>(easymotion-bd-fl)
map t <Plug>(easymotion-bd-tl)
" map \ <Plug>(easymotion-sn)
map s <Plug>(easymotion-sn)
" map l <Plug>(easymotion-lineforward)
" map j <Plug>(easymotion-j)
" map k <Plug>(easymotion-k)
" map h <Plug>(easymotion-linebackward)
"-----------------------------------------
" EasyAlign
"-----------------------------------------
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
"-----------------------------------------
" UltiSnips
"-----------------------------------------
" Ultisnips and coc.nvim conflict https://github.com/SirVer/ultisnips/issues/1052#issuecomment-504719268
let g:UltiSnipsExpandTrigger = "<nop>"
" Load my own snippets
let g:UltiSnipsSnippetDirectories=[$NVIM_DIR.'/plugged/vim-snippets', $HOME.'/Nextcloud/vim-snippets']
"-----------------------------------------
" GitGutter
"-----------------------------------------
let g:gitgutter_max_signs=9999
hi SignColumn guibg=black ctermbg=black
nnoremap ggn :GitGutterNextHunk<cr>
nnoremap ggp :GitGutterPrevHunk<cr>
nmap <Leader>s <Plug>(GitGutterStageHunk)
nmap <Leader>u <Plug>(GitGutterUndoHunk)
"-----------------------------------------
" Fugitive
"-----------------------------------------
command! Gdom Gdiff origin/master
"-----------------------------------------
" Neomake
"-----------------------------------------
" Remove when https://github.com/neomake/neomake/issues/2108#issuecomment-429153406
" is resolved.
let g:neomake_dockerfile_hadolint_uses_stdin = 0
let g:neomake_list_height = 8
let g:neomake_open_list = 2

let g:neomake_text_enabled_makers = ['writegood']
let g:neomake_markdown_enabled_makers = ['markdownlint']
let g:neomake_python_python_exe = 'python3'
let g:neomake_python_enabled_makers = ['pylint', 'mypy', 'flake8']
let g:neomake_jsonnet_jsonnetlint_maker = {
    \ 'name': 'jsonnetlint',
    \ 'exe': 'jsonnet-lint',
    \ 'errorformat': '%m',
    \ }
let g:neomake_jsonnet_jsonnetfmt_maker = {
    \ 'name': 'jsonnetfmt',
    \ 'exe': 'jsonnetfmt',
    \ 'args': ['--in-place'],
    \ }
let g:neomake_jsonnet_enabled_makers = ['jsonnetfmt']

let g:neomake_typescript_enabled_makers = ['tsc', 'eslint']
let g:neomake_typescript_tsx_enabled_makers = neomake_typescript_enabled_makers
let g:neomake_scss_enabled_makers = ['stylelint']
let g:neomake_css_enabled_makers = neomake_scss_enabled_makers

let g:neomake_pylint_exe = systemlist('which pylint')[0]
let g:neomake_mypy_exe = systemlist('which mypy')[0]
let g:neomake_eslint_exe = systemlist('git rev-parse --show-toplevel')[0].'/'.systemlist('which eslint')[0]
let g:neomake_stylelint_exe = systemlist('which stylelint')[0]
let g:neomake_stylelint_exe = systemlist('which stylelint')[0]

let root_dir = finddir('.git/..')
let gitignore = root_dir.'/.gitignore'
let g:neomake_eslint_args = ['--fix', '--format=compact', '--ignore-path', gitignore]
let g:neomake_stylelint_args = ['--fix', '--formatter=compact', '--ignore-path', gitignore]
call neomake#configure#automake('w')
" Refresh file after Neomake fixed our errors
" https://github.com/neomake/neomake/issues/173#issuecomment-335530355
augroup my_neomake_hooks
  au!
  autocmd User *.html NeomakeJobFinished :edit
  autocmd User NeomakeJobFinished :checktime

augroup END

autocmd BufWritePre * if &ft == 'go' | exec 'GoImports' | endif
"-----------------------------------------
" Tcomment
"-----------------------------------------
let g:tcomment_maps = 1
let g:tcomment_opleader1 = "<Leader>"
"-----------------------------------------
" pear-tree
"-----------------------------------------
" Disable this as it conflicts with coc.nvim and ultisnips
let g:pear_tree_map_special_keys = 0
let g:pear_tree_smart_openers = 1
let g:pear_tree_smart_closers = 1
let g:pear_tree_smart_backspace = 1
let g:pear_tree_timeout = 1
let g:pear_tree_did_javascript_ftplugin = 1
"-----------------------------------------
" NERDTree
"-----------------------------------------
let NERDTreeShowHidden=1
let NERDTreeIgnore = ['\.pyc$', '\.db$']
noremap <F5> :NERDTreeToggle<CR>
" Open nerdtree on start
"autocmd vimenter * NERDTree
" Open NERDTree on enter and use the non-nerdtree window
" Go to previous (last accessed) window.
"autocmd VimEnter * wincmd p
" When exiting: Close nerdtree if its the only window left
autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()
" Close all open buffers on entering a window if the only
" buffer that's left is the NERDTree buffer
function! s:CloseIfOnlyNerdTreeLeft()
  if exists("t:NERDTreeBufName")
    if bufwinnr(t:NERDTreeBufName) != -1
      if winnr("$") == 1
        q
      endif
    endif
  endif
endfunction
"-----------------------------------------
" gcmt/wildfire.vim
"-----------------------------------------
let g:wildfire_objects = {
    \ "*" : ["i'", 'i"', "i)", "i]", "i}"],
    \ "html,xml" : ["at", "it"],
\ }
"-----------------------------------------
let g:lua_complete_omni = 1
let g:lua_complete_dynamic = 0
"-----------------------------------------
autocmd BufNewFile,BufRead *.tf set filetype=terraform
let g:terraform_fmt_on_save=1
"-----------------------------------------
" juliosueiras/vim-terraform-completion
"-----------------------------------------
autocmd filetype terraform noremap <buffer><silent> gd :call terraformcomplete#JumpRef()<CR>
autocmd filetype terraform noremap <buffer><silent><Leader>o :call terraformcomplete#LookupAttr()<CR>
autocmd filetype terraform noremap <buffer><silent> K :call terraformcomplete#OpenDoc()<CR>
let g:neomake_terraform_enabled_makers = ['terraform_validate', 'tflint']
"-----------------------------------------
" rhysd/git-messenger.vim
"-----------------------------------------
let g:git_messenger_include_diff = "current"
"-----------------------------------------
" Random funcs
"-----------------------------------------
command! StripTrailingWhitespaces :call <SID>StripTrailingWhitespaces()
fun! <SID>StripTrailingWhitespaces()
  if &ft =~ 'vim'
    return
  endif
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun
" Strip trailing whitespace
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

fun! CopyBuffer()
  let l = line(".")
  let c = col(".")
  execute "normal ggVG\"+y"
  call cursor(l, c)
endfun

fu! MimicBrowserClose()
  " Mimic Chrome behavior with the exception that if we have an alt buffer, we switch to that first.
  "
  " You would expect this to work by default, but vim has a weird pattern of switching hidden
  " buffers. If a buffer is not set as hidden, it will not be the prioritized when jumping using bn
  " or bw. So if a file has been opened but never visited in a window it will never have the hidden
  " option so the window order will be weird.

  " We have a previous buffer. Wipe current and switch to that
  if buflisted(bufnr('#'))
    " Swap to the previous buffer first and delete old buffer. If we just do bw! the first buffer we
    " switch to will be a quickfix window if the quickfix widow is open.
    execute 'buf' . bufnr('#')
    execute 'bw! ' . bufname('#')
  " Current buffer is the only buffer to exist
  elseif bufnr('^') == bufnr('%')
    bw!
  " There are buffers to the right
  elseif bufnr('%') < bufnr('$')
    let nextRight = -1
    " Find the next buffer to right
    for i in range(bufnr('%') + 1, bufnr('$'))
      if buflisted(i)
        let nextRight = i
        break
      endif
    endfor
    execute 'buf' . nextRight
    bw! #
  " Current buffer is the last buffer on the right so we switch left
  elseif bufnr('%') == bufnr('$')
    let nextLeft = -1
    " Find the next buffer to the left
    for i in range(bufnr('%') - 1, bufnr('^'), -1)
      if buflisted(i)
        let nextLeft = i
        break
      endif
    endfor
    execute 'buf' . nextLeft
    bw! #
  endif
endfu

" This function does two things:
" 1) Do not switch window if you're on a NERDTree window
" 2) If you switch to a quickfix/location list window, just skip that one. Can't be called
" recursively
" If switch is successful return 1 else 0
fu! Switch_buffer(direction)
  if a:direction == "left"
    let cmdDirection = "bprev"
  elseif a:direction == "right"
    let cmdDirection = "bnext"
  endif

  if bufname("%") =~#"^NERD_tree_[0-9]"
    echo "I won't switch buffers in a NERDTree window"
    return 0
  else
    execute cmdDirection
    if &filetype == 'qf'
      execute cmdDirection
    endif
    return 1
  endif
endfu

" Highlights the current search word as soon as you switch words
"https://www.youtube.com/watch?v=aHm36-na4-4
fu! HLNext (blinktime)
  let [bufnum, lnum, col, off] = getpos('.')
  let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
  let target_pat = '\c\%#'.@/
  let ring = matchadd('SearchFlash', target_pat, 104)
  redraw
  exec 'sleep ' . float2nr(a:blinktime * 800) . 'm'
  call matchdelete(ring)
  redraw
endfunction

" See http://stackoverflow.com/a/6271254
function! Get_visual_selection()
  " Why is this not a built-in Vim script function?!
  let [lnum1, col1] = getpos("'<")[1:2]
  let [lnum2, col2] = getpos("'>")[1:2]
  " Dani patch. If lnum1=0 and lnum2=0 something went wrong
  if lnum1 == 0 && lnum2 == 0
    return ''
  endif
  let lines = getline(lnum1, lnum2)
  let lines[-1] = lines[-1][: col2 - (&selection == 'inclusive' ? 1 : 2)]
  let lines[0] = lines[0][col1 - 1:]
  return join(lines, "\n")
endfunction

fu! InsertSemicolons()
  let currentmode = mode()
  let l = line(".")
  let c = col(".")
  let currLine = getline('.')
  " If we are in normal mode and the last character is not ;
  " This for some reason works for visual line mode too. Select multiple and it inserts on all
  " despite the normal mode check
  " Note: vim has weird regexes. you need to escape '\|' and not '('. See `:h \v`
  " Currline is not ( or { or ; or not empty
  if currentmode == 'n' && currLine !~ '\v(\(|\{|;)\s*$' && currLine !~ '^$'
    " We don't want - `var foo = baz ;`
    call <SID>StripTrailingWhitespaces()
    execute "normal! A;\<esc>"
    call cursor(l, c)
  endif
endfu!

" Prompt the user for width and reformat the text to specific width before
" restoring textwidth.  Works for visual mode.  Useful for reformatting comments
fu! ReformatTextWidth() range
  " For some reason inputsave() and inputrestore() have to be called between getting input
  call inputsave()
  let currWidth = &textwidth
  let width = input('Enter textwidth>')
  if IsNumber(width)
    let &textwidth = width
  endif
  " Calling gvgq won't work because in normal mode it would
  " get the last visual selection which we don't want
  normal v
  execute "normal " . a:firstline . "gg"
  execute "normal " . a:lastline . "gg"
  normal gq
  let &textwidth = currWidth
  call inputrestore()
endfu!

fu! IsNumber(val)
  return type(a:val) == 0
endfu

command! W :execute ':silent w !sudo tee % > /dev/null' | :edit!

" Create the parent directory if it doesn't exist before saving
function! s:MkNonExDir(file, buf)
  if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
    let dir=fnamemodify(a:file, ':h')
    if !isdirectory(dir)
      call mkdir(dir, 'p')
    endif
  endif
endfunction

augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), expand('<abuf>'))
augroup END

" https://github.com/junegunn/fzf/issues/632#issuecomment-236959826
if has('nvim')
  aug fzf_setup
    au!
    au TermOpen term://*FZF tnoremap <silent> <buffer><nowait> <esc> <c-c>
  aug END
end

let test#python#runner = 'pytest'
let test#python#pytest#options = '-s'

let g:hardtime_default_on = 1
let g:hardtime_maxcount = 7
let g:hardtime_timeout = 4000
let g:hardtime_ignore_quickfix = 1
let g:hardtime_showmsg = 1
autocmd CursorHold * silent call CocActionAsync('highlight')

augroup spec_ft
  au!
  autocmd BufNewFile,BufRead *.spec   set syntax=python
  autocmd BufNewFile,BufRead *.dat,*.ldg,*.ledger   setf ledger | comp ledger
augroup END
lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = "maintained", -- one of "all", "maintained" (parsers with maintainers), or a list of languages
  ignore_install = { "javascript" }, -- List of parsers to ignore installing
  highlight = {
    enable = true,              -- false will disable the whole extension
    disable = { },  -- list of language that will be disabled
    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = false,
  },
}
EOF
